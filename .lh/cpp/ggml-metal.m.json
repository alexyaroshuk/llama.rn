{
    "sourceFile": "cpp/ggml-metal.m",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733115836309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733115836309,
            "name": "Commit-0",
            "content": "#import \"ggml-metal.h\"\r\n\r\n#import \"ggml-impl.h\"\r\n#import \"ggml-backend-impl.h\"\r\n#import \"ggml-metal-impl.h\"\r\n\r\n#import <Foundation/Foundation.h>\r\n\r\n#import <Metal/Metal.h>\r\n\r\n#import \"ggml-metal-fixes.h\"\r\n\r\n#undef MIN\r\n#undef MAX\r\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\r\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\r\n\r\n// max memory buffers that can be mapped to the device\r\n#define LM_GGML_METAL_MAX_BUFFERS 64\r\n\r\n// max number of MTLCommandBuffer used to submit a graph for processing\r\n#define LM_GGML_METAL_MAX_COMMAND_BUFFERS 8\r\n\r\n#define UNUSED(x) (void)(x)\r\n\r\n// globals\r\n\r\n// overload of MTLGPUFamilyMetal3 (not available in some environments)\r\nstatic const NSInteger MTLGPUFamilyMetal3_GGML = 5001;\r\n\r\n// initialized in lm_ggml_backend_metal_reg\r\nstatic struct lm_ggml_backend_reg    g_lm_ggml_backend_metal_reg;\r\nstatic struct lm_ggml_backend_device g_lm_ggml_backend_metal_device;\r\n\r\n// information about a Metal device\r\n// note: assumes single GPU device - the default one\r\n// TODO: support multiple GPU devices\r\nstatic struct lm_ggml_backend_metal_device_context {\r\n    id<MTLDevice> mtl_device;\r\n    int           mtl_device_ref_count;\r\n\r\n    bool has_simdgroup_reduction;\r\n    bool has_simdgroup_mm;\r\n    bool has_bfloat;\r\n    bool use_bfloat;\r\n\r\n    char name[128];\r\n} g_lm_ggml_ctx_dev_main = {\r\n    /*.mtl_device              =*/ nil,\r\n    /*.mtl_device_ref_count    =*/ 0,\r\n    /*.has_simdgroup_reduction =*/ false,\r\n    /*.has_simdgroup_mm        =*/ false,\r\n    /*.has_bfloat              =*/ false,\r\n    /*.use_bfloat              =*/ false,\r\n    /*.name                    =*/ \"\",\r\n};\r\n\r\n// acquire\r\nstatic id<MTLDevice> lm_ggml_backend_metal_device_acq(struct lm_ggml_backend_metal_device_context * ctx) {\r\n    assert(ctx != NULL);\r\n\r\n    if (ctx->mtl_device == nil) {\r\n        ctx->mtl_device = MTLCreateSystemDefaultDevice();\r\n\r\n        ctx->has_simdgroup_reduction  = ggml_metal_supports_family(ctx->mtl_device, MTLGPUFamilyApple7);\r\n        ctx->has_simdgroup_reduction |= ggml_metal_supports_family(ctx->mtl_device, MTLGPUFamilyMetal3_GGML);\r\n\r\n        ctx->has_simdgroup_mm = ggml_metal_supports_family(ctx->mtl_device, MTLGPUFamilyApple7);\r\n\r\n        ctx->has_bfloat  = ggml_metal_supports_family(ctx->mtl_device, MTLGPUFamilyMetal3_GGML);\r\n        ctx->has_bfloat |= ggml_metal_supports_family(ctx->mtl_device, MTLGPUFamilyApple6);\r\n\r\n#if defined(LM_GGML_METAL_USE_BF16)\r\n        ctx->use_bfloat = ctx->has_bfloat;\r\n#else\r\n        ctx->use_bfloat = false;\r\n#endif\r\n\r\n        strncpy(ctx->name, [[ctx->mtl_device name] UTF8String], sizeof(ctx->name) - 1);\r\n    }\r\n\r\n    ctx->mtl_device_ref_count++;\r\n\r\n    return ctx->mtl_device;\r\n}\r\n\r\n// release\r\nstatic void lm_ggml_backend_metal_device_rel(struct lm_ggml_backend_metal_device_context * ctx) {\r\n    assert(ctx != NULL);\r\n    assert(ctx->mtl_device_ref_count > 0);\r\n\r\n    ctx->mtl_device_ref_count--;\r\n\r\n    if (ctx->mtl_device_ref_count == 0) {\r\n        [ctx->mtl_device release];\r\n        ctx->mtl_device = nil;\r\n    }\r\n}\r\n\r\n// kernels\r\n\r\nstruct lm_ggml_metal_kernel {\r\n    id<MTLComputePipelineState> pipeline;\r\n};\r\n\r\nenum lm_ggml_metal_kernel_type {\r\n    LM_GGML_METAL_KERNEL_TYPE_ADD,\r\n    LM_GGML_METAL_KERNEL_TYPE_ADD_ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_SUB,\r\n    LM_GGML_METAL_KERNEL_TYPE_SUB_ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_DIV,\r\n    LM_GGML_METAL_KERNEL_TYPE_DIV_ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_REPEAT_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_REPEAT_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_REPEAT_I32,\r\n    LM_GGML_METAL_KERNEL_TYPE_REPEAT_I16,\r\n    LM_GGML_METAL_KERNEL_TYPE_SCALE,\r\n    LM_GGML_METAL_KERNEL_TYPE_SCALE_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_CLAMP,\r\n    LM_GGML_METAL_KERNEL_TYPE_TANH,\r\n    LM_GGML_METAL_KERNEL_TYPE_RELU,\r\n    LM_GGML_METAL_KERNEL_TYPE_SIGMOID,\r\n    LM_GGML_METAL_KERNEL_TYPE_GELU,\r\n    LM_GGML_METAL_KERNEL_TYPE_GELU_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_GELU_QUICK,\r\n    LM_GGML_METAL_KERNEL_TYPE_GELU_QUICK_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_SILU,\r\n    LM_GGML_METAL_KERNEL_TYPE_SILU_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_ELU,\r\n    LM_GGML_METAL_KERNEL_TYPE_SOFT_MAX_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_SOFT_MAX_F16_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_SOFT_MAX_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_SOFT_MAX_F32_4,\r\n    LM_GGML_METAL_KERNEL_TYPE_DIAG_MASK_INF,\r\n    LM_GGML_METAL_KERNEL_TYPE_DIAG_MASK_INF_8,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_BF16,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q4_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q4_1,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q5_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q5_1,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q8_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q2_K,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q3_K,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q4_K,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q5_K,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_Q6_K,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ2_XXS,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ2_XS,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ3_XXS,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ3_S,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ2_S,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ1_S,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ1_M,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ4_NL,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_IQ4_XS,\r\n    LM_GGML_METAL_KERNEL_TYPE_GET_ROWS_I32,\r\n    LM_GGML_METAL_KERNEL_TYPE_RMS_NORM,\r\n    LM_GGML_METAL_KERNEL_TYPE_GROUP_NORM,\r\n    LM_GGML_METAL_KERNEL_TYPE_NORM,\r\n    LM_GGML_METAL_KERNEL_TYPE_SSM_CONV_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_SSM_SCAN_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_F32_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_F16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_F16_F32_1ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_F16_F32_L4,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_F16_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_BF16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_BF16_F32_1ROW,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_BF16_F32_L4,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_BF16_BF16,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q4_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q4_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q5_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q5_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q8_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q2_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q3_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q4_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q5_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_Q6_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ2_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ2_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ3_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ3_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ2_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ1_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ1_M_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ4_NL_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_IQ4_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_F32_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_F16_F32,\r\n  //LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_F16_F32_1ROW,\r\n  //LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_F16_F32_L4,\r\n  //LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_F16_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_BF16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q4_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q4_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q5_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q5_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q8_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q2_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q3_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q4_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q5_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_Q6_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ2_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ2_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ3_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ3_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ2_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ1_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ1_M_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ4_NL_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MV_ID_IQ4_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_F32_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_F16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_BF16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q4_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q4_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q5_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q5_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q8_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q2_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q3_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q4_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q5_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_Q6_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ2_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ2_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ3_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ3_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ2_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ1_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ1_M_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ4_NL_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_IQ4_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_F32_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_F16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_BF16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q4_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q4_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q5_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q5_1_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q8_0_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q2_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q3_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q4_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q5_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_Q6_K_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ2_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ2_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ3_XXS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ3_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ2_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ1_S_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ1_M_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ4_NL_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_MUL_MM_ID_IQ4_XS_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_ROPE_NORM_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_ROPE_NORM_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_ROPE_NEOX_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_ROPE_NEOX_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_IM2COL_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_IM2COL_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_IM2COL_EXT_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_IM2COL_EXT_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_UPSCALE_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_PAD_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_ARANGE_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_TIMESTEP_EMBEDDING_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_ARGSORT_F32_I32_ASC,\r\n    LM_GGML_METAL_KERNEL_TYPE_ARGSORT_F32_I32_DESC,\r\n    LM_GGML_METAL_KERNEL_TYPE_LEAKY_RELU_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_F16_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_BF16_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q4_1_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q5_1_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H64,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H80,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H96,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H112,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_Q8_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_F16_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_BF16_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q4_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q4_1_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q5_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q5_1_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q8_0_H128,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_F16_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_BF16_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q4_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q4_1_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q5_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q5_1_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_FLASH_ATTN_EXT_VEC_Q8_0_H256,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_BF16,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F16_F16,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_BF16_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_BF16_BF16,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_Q8_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_Q4_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_Q4_1,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_Q5_0,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_Q5_1,\r\n    LM_GGML_METAL_KERNEL_TYPE_CPY_F32_IQ4_NL,\r\n    LM_GGML_METAL_KERNEL_TYPE_CONCAT,\r\n    LM_GGML_METAL_KERNEL_TYPE_SQR,\r\n    LM_GGML_METAL_KERNEL_TYPE_SQRT,\r\n    LM_GGML_METAL_KERNEL_TYPE_SIN,\r\n    LM_GGML_METAL_KERNEL_TYPE_COS,\r\n    LM_GGML_METAL_KERNEL_TYPE_SUM_ROWS,\r\n    LM_GGML_METAL_KERNEL_TYPE_POOL_2D_AVG_F32,\r\n    LM_GGML_METAL_KERNEL_TYPE_POOL_2D_MAX_F32,\r\n\r\n    LM_GGML_METAL_KERNEL_TYPE_COUNT\r\n};\r\n\r\nstruct lm_ggml_backend_metal_context {\r\n    id<MTLCommandQueue> queue;\r\n\r\n    dispatch_queue_t d_queue;\r\n\r\n    struct lm_ggml_metal_kernel kernels[LM_GGML_METAL_KERNEL_TYPE_COUNT];\r\n\r\n    // capture state\r\n    bool capture_next_compute;\r\n    bool capture_started;\r\n\r\n    id<MTLCaptureScope> capture_scope;\r\n\r\n    // command buffer state\r\n    int n_cb;           // number of extra threads used to submit the command buffers\r\n    int n_nodes_0;      // number of nodes submitted by the main thread\r\n    int n_nodes_1;      // remaining number of nodes submitted by the n_cb threads\r\n    int n_nodes_per_cb;\r\n\r\n    struct lm_ggml_cgraph * gf;\r\n\r\n    // the callback given to the thread pool\r\n    void (^encode_async)(size_t ith);\r\n\r\n    // n_cb command buffers + 1 used by the main thread\r\n    id<MTLCommandBuffer> command_buffers[LM_GGML_METAL_MAX_COMMAND_BUFFERS + 1];\r\n\r\n    // abort lm_ggml_metal_graph_compute if callback returns true\r\n    lm_ggml_abort_callback abort_callback;\r\n    void *              abort_callback_data;\r\n};\r\n\r\n// MSL code\r\n// TODO: move the contents here when ready\r\n//       for now it is easier to work in a separate file\r\n// static NSString * const msl_library_source = @\"see metal.metal\";\r\n\r\n// Here to assist with NSBundle Path Hack\r\n@interface LMGGMLMetalClass : NSObject\r\n@end\r\n@implementation LMGGMLMetalClass\r\n@end\r\n\r\nstatic void * lm_ggml_metal_host_malloc(size_t n) {\r\n    void * data = NULL;\r\n\r\n#if TARGET_OS_OSX\r\n    kern_return_t err = vm_allocate((vm_map_t) mach_task_self(), (void *) &data, n, VM_FLAGS_ANYWHERE);\r\n    if (err != KERN_SUCCESS) {\r\n        LM_GGML_LOG_ERROR(\"%s: error: vm_allocate failed\\n\", __func__);\r\n        return NULL;\r\n    }\r\n#else\r\n    const int result = posix_memalign((void **) &data, sysconf(_SC_PAGESIZE), n);\r\n    if (result != 0) {\r\n        LM_GGML_LOG_ERROR(\"%s: error: posix_memalign failed\\n\", __func__);\r\n        return NULL;\r\n    }\r\n#endif\r\n\r\n    return data;\r\n}\r\n\r\nstatic struct lm_ggml_backend_metal_context * lm_ggml_metal_init(lm_ggml_backend_dev_t dev) {\r\n    LM_GGML_LOG_INFO(\"%s: allocating\\n\", __func__);\r\n\r\n#if TARGET_OS_OSX && !LM_GGML_METAL_NDEBUG\r\n    // Show all the Metal device instances in the system\r\n    NSArray * devices = MTLCopyAllDevices();\r\n    for (id<MTLDevice> device in devices) {\r\n        LM_GGML_LOG_INFO(\"%s: found device: %s\\n\", __func__, [[device name] UTF8String]);\r\n    }\r\n    [devices release]; // since it was created by a *Copy* C method\r\n#endif\r\n\r\n    // init context\r\n    struct lm_ggml_backend_metal_context * ctx = calloc(1, sizeof(struct lm_ggml_backend_metal_context));\r\n    struct lm_ggml_backend_metal_device_context * ctx_dev = dev->context;\r\n\r\n    id<MTLDevice> device = lm_ggml_backend_metal_device_acq(ctx_dev);\r\n    LM_GGML_LOG_INFO(\"%s: picking default device: %s\\n\", __func__, [[device name] UTF8String]);\r\n\r\n    ctx->queue  = [device newCommandQueue];\r\n    ctx->d_queue = dispatch_queue_create(\"ggml-metal\", DISPATCH_QUEUE_CONCURRENT);\r\n\r\n    id<MTLLibrary> metal_library;\r\n\r\n    // load library\r\n    //\r\n    // - first check if the library is embedded\r\n    // - then check if the library is in the bundle\r\n    // - if not found, load the source and compile it\r\n    // - if that fails, return NULL\r\n    {\r\n        NSBundle * bundle = nil;\r\n#ifdef SWIFT_PACKAGE\r\n        bundle = SWIFTPM_MODULE_BUNDLE;\r\n#else\r\n        bundle = [NSBundle bundleForClass:[LMGGMLMetalClass class]];\r\n#endif\r\n\r\n        NSError * error = nil;\r\n\r\n#if LM_GGML_METAL_EMBED_LIBRARY\r\n        const bool try_metallib = false;\r\n#else\r\n        const bool try_metallib = true;\r\n#endif\r\n\r\n        NSString * path_lib = [bundle pathForResource:@\"ggml-llama\" ofType:@\"metallib\"];\r\n        if (try_metallib && path_lib != nil) {\r\n            // pre-compiled library found\r\n            NSURL * libURL = [NSURL fileURLWithPath:path_lib];\r\n            LM_GGML_LOG_INFO(\"%s: loading '%s'\\n\", __func__, [path_lib UTF8String]);\r\n\r\n            metal_library = [device newLibraryWithURL:libURL error:&error];\r\n            if (error) {\r\n                LM_GGML_LOG_ERROR(\"%s: error: %s\\n\", __func__, [[error description] UTF8String]);\r\n                return NULL;\r\n            }\r\n        } else {\r\n#if LM_GGML_METAL_EMBED_LIBRARY\r\n            LM_GGML_LOG_INFO(\"%s: using embedded metal library\\n\", __func__);\r\n\r\n            extern const char lm_ggml_metallib_start[];\r\n            extern const char lm_ggml_metallib_end[];\r\n\r\n            NSString * src = [[NSString alloc] initWithBytes:lm_ggml_metallib_start length:(lm_ggml_metallib_end-lm_ggml_metallib_start) encoding:NSUTF8StringEncoding];\r\n#else\r\n            LM_GGML_LOG_INFO(\"%s: default.metallib not found, loading from source\\n\", __func__);\r\n\r\n            NSString * path_source;\r\n            NSString * path_resource = [[NSProcessInfo processInfo].environment objectForKey:@\"LM_GGML_METAL_PATH_RESOURCES\"];\r\n\r\n            LM_GGML_LOG_INFO(\"%s: LM_GGML_METAL_PATH_RESOURCES = %s\\n\", __func__, path_resource ? [path_resource UTF8String] : \"nil\");\r\n\r\n            if (path_resource) {\r\n                path_source = [path_resource stringByAppendingPathComponent:@\"ggml-metal.metal\"];\r\n            } else {\r\n                path_source = [bundle pathForResource:@\"ggml-metal\" ofType:@\"metal\"];\r\n            }\r\n\r\n            if (path_source == nil) {\r\n                LM_GGML_LOG_WARN(\"%s: error: could not use bundle path to find ggml-metal.metal, falling back to trying cwd\\n\", __func__);\r\n                path_source = @\"ggml-metal.metal\";\r\n            }\r\n\r\n            LM_GGML_LOG_INFO(\"%s: loading '%s'\\n\", __func__, [path_source UTF8String]);\r\n\r\n            NSString * src = [NSString stringWithContentsOfFile:path_source encoding:NSUTF8StringEncoding error:&error];\r\n            if (error) {\r\n                LM_GGML_LOG_ERROR(\"%s: error: %s\\n\", __func__, [[error description] UTF8String]);\r\n                return NULL;\r\n            }\r\n#endif // LM_GGML_METAL_EMBED_LIBRARY\r\n\r\n            @autoreleasepool {\r\n                // dictionary of preprocessor macros\r\n                NSMutableDictionary * prep = [NSMutableDictionary dictionary];\r\n\r\n                if (ctx_dev->use_bfloat) {\r\n                    [prep setObject:@\"1\" forKey:@\"LM_GGML_METAL_USE_BF16\"];\r\n                }\r\n\r\n#if LM_GGML_METAL_EMBED_LIBRARY\r\n                [prep setObject:@\"1\" forKey:@\"LM_GGML_METAL_EMBED_LIBRARY\"];\r\n#endif\r\n\r\n                MTLCompileOptions * options = [MTLCompileOptions new];\r\n                options.preprocessorMacros = prep;\r\n\r\n                //[options setFastMathEnabled:false];\r\n\r\n                metal_library = [device newLibraryWithSource:src options:options error:&error];\r\n                if (error) {\r\n                    LM_GGML_LOG_ERROR(\"%s: error: %s\\n\", __func__, [[error description] UTF8String]);\r\n                    return NULL;\r\n                }\r\n\r\n#if !__has_feature(objc_arc)\r\n                [options release];\r\n#endif\r\n            }\r\n#if LM_GGML_METAL_EMBED_LIBRARY\r\n            [src release];\r\n#endif // LM_GGML_METAL_EMBED_LIBRARY\r\n        }\r\n    }\r\n\r\n    // print MTL GPU family:\r\n    LM_GGML_LOG_INFO(\"%s: GPU name:   %s\\n\", __func__, [[device name] UTF8String]);\r\n\r\n    // determine max supported GPU family\r\n    // https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf\r\n    // https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf\r\n    {\r\n        for (int i = MTLGPUFamilyApple1 + 20; i >= MTLGPUFamilyApple1; --i) {\r\n            if (ggml_metal_supports_family(device, i - MTLGPUFamilyApple1 + 1)) {\r\n                LM_GGML_LOG_INFO(\"%s: GPU family: MTLGPUFamilyApple%d  (%d)\\n\", __func__, i - (int) MTLGPUFamilyApple1 + 1, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (int i = MTLGPUFamilyCommon1 + 5; i >= MTLGPUFamilyCommon1; --i) {\r\n            if (ggml_metal_supports_family(device, i - MTLGPUFamilyCommon1 + 1)) {\r\n                LM_GGML_LOG_INFO(\"%s: GPU family: MTLGPUFamilyCommon%d (%d)\\n\", __func__, i - (int) MTLGPUFamilyCommon1 + 1, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (int i = MTLGPUFamilyMetal3_GGML + 5; i >= MTLGPUFamilyMetal3_GGML; --i) {\r\n            if (ggml_metal_supports_family(device, i - MTLGPUFamilyMetal3_GGML + 3)) {\r\n                LM_GGML_LOG_INFO(\"%s: GPU family: MTLGPUFamilyMetal%d  (%d)\\n\", __func__, i - (int) MTLGPUFamilyMetal3_GGML + 3, i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    LM_GGML_LOG_INFO(\"%s: simdgroup reduction   = %s\\n\", __func__, ctx_dev->has_simdgroup_reduction     ? \"true\" : \"false\");\r\n    LM_GGML_LOG_INFO(\"%s: simdgroup matrix mul. = %s\\n\", __func__, ctx_dev->has_simdgroup_mm            ? \"true\" : \"false\");\r\n    LM_GGML_LOG_INFO(\"%s: has bfloat            = %s\\n\", __func__, ctx_dev->has_bfloat                  ? \"true\" : \"false\");\r\n    LM_GGML_LOG_INFO(\"%s: use bfloat            = %s\\n\", __func__, ctx_dev->use_bfloat                  ? \"true\" : \"false\");\r\n    LM_GGML_LOG_INFO(\"%s: hasUnifiedMemory      = %s\\n\", __func__, ctx_dev->mtl_device.hasUnifiedMemory ? \"true\" : \"false\");\r\n\r\n    ctx->capture_next_compute = false;\r\n    ctx->capture_started = false;\r\n    ctx->capture_scope = nil;\r\n\r\n    ctx->gf = nil;\r\n    ctx->encode_async = nil;\r\n    for (int i = 0; i < LM_GGML_METAL_MAX_COMMAND_BUFFERS; ++i) {\r\n        ctx->command_buffers[i] = nil;\r\n    }\r\n"
        }
    ]
}